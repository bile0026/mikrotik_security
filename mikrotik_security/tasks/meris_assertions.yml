---
# tasks for meris vulneratiblity assertions

- name: Re-Check socks status
  community.routeros.command:
    commands:
      - /ip socks print
  register: socks_recheck

- name: Re-Check for Mikrotik.php file
  community.routeros.command:
    commands:
      #- ":if ([:len [/file find name~'.*[Mm]ikrotik\\.php.*']] >= 1) do={:put 'found'}"
      #- /file [ where name~".*[Mm]ikrotik\.php.*" ]
      #- /file find where name=mikrotik.php
      - >
        :if ([:len [/file find name~".*[Mm]ikrotik\\.php.*"]] >= 1) do={
          :put "possible breach file"
        } else={ :put "notfound breach file"}
  register: file_recheck

- name: Re-Check for mikrotik.php scripts
  community.routeros.command:
    commands:
      - >
        :if ([:len [/system script find source~".*[Mm]ikrotik\\.php.*"]] >= 1) do={
          :put "possible breach script"
        } else={ :put "notfound breach script"}
  register: script_recheck

- name: Re-Check for mikrotik.php schedules
  community.routeros.command:
    commands:
      - >
        :if ([:len [/system scheduler find on-event~".*[Mm]ikrotik\\.php.*"]] >= 1) do={
          :put "possible breach schedule"
        } else={ :put "notfound breach schedule"}
  register: schedule_recheck

- name: Check for unauthorized users
  community.routeros.command:
    commands:
      - >
        :if ([:len [/user find name~".*service.*"]] >= 1) do={
          :put "possible breach user"
        } else={ :put "notfound breach user"}
  register: user_recheck

- name: Assert socks is disabled
  assert:
    that: "'no' in {{ (socks_recheck.stdout[0]  | regex_search('enabled: ([a-z]{2,3})', '\\1')) }}"
    success_msg: "Congratulations, socks is disabled. This is good!"
    fail_msg: "***DANGER*** socks is enabled, if you have not done this on purpose your system may be compromised."
  ignore_errors: true
  register: socks_assert

- name: Assert no mikrotik.php file found on device
  assert:
    that: "'possible breach file' not in {{ (file_recheck.stdout[0]  | regex_search('([a-z]{8} breach file)$', '\\1')) }}"
    success_msg: "Congratulations, No mikrotik.php file found. This is good!"
    fail_msg: "***DANGER*** mikrotik.php file found, if you have not done this on purpose your system may be compromised."
  ignore_errors: true
  register: file_assert

- name: Assert no mikrotik.php script is found
  assert:
    that: "'possible breach script' not in {{ (script_recheck.stdout[0]  | regex_search('([a-z]{8} breach script)$', '\\1')) }}"
    success_msg: "Congratulations, No mikrotik.php script found. This is good!"
    fail_msg: "***DANGER*** mikrotik.php script found, if you have not done this on purpose your system may be compromised."
  ignore_errors: true
  register: script_assert

- name: Assert no mikrotik.php schedule is found
  assert:
    that: "'possible breach schedule' not in {{ (schedule_recheck.stdout[0]  | regex_search('([a-z]{8} breach schedule)$', '\\1')) }}"
    success_msg: "Congratulations, No mikrotik.php schedule found. This is good!"
    fail_msg: "***DANGER*** mikrotik.php schedule found, if you have not done this on purpose your system may be compromised."
  ignore_errors: true
  register: schedule_assert

- name: Assert no unauthorized users are found
  assert:
    that: "'possible breach user' not in {{ (user_recheck.stdout[0]  | regex_search('([a-z]{8} breach user)$', '\\1')) }}"
    success_msg: "Congratulations, No unauthorized users found. This is good! (only checks for users with name like *service*)"
    fail_msg: "***DANGER*** unauthorized users found, if you have not done this on purpose your system may be compromised."
  ignore_errors: true
  register: user_assert

- name: Assert all conditions
  assert:
    that:
      - socks_assert is not failed
      - file_assert is not failed
      - script_assert is not failed
      - schedule_assert is not failed
      - user_assert is not failed
    success_msg: "Congratulations, {{ ansible_host }} does not seem to be compromised. It still may be a good idea to change passwords."
    fail_msg: "***DANGER*** possible compromise found on {{ ansible_host }}. Please check logs and consider running in remediation mode."
  ignore_errors: true
  register: full_assert
